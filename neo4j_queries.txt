###################################################
###################################################
### LOAD NODES

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///Users/aliyesilli/Documents/rr_movielens/graphdb/ml_users.csv" AS row
FIELDTERMINATOR '|'
CREATE (:Users {userId: row.userId});

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_movies.csv" AS row
FIELDTERMINATOR '|'
CREATE (:Movies {movieId: row.movieId, title: row.title, rating_mean: row.rating_mean});

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_genres.csv" AS row
FIELDTERMINATOR '|'
CREATE (:Genres {genres: row.genres});


###################################################
###################################################
### CREATE INDEX

CREATE INDEX ON :Users(userId);

CREATE INDEX ON :Movies(movieId);


###################################################
###################################################
### LOAD AND CREATE RELATIONSHIPS

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_users_movies.csv" AS row
FIELDTERMINATOR '|'
MATCH (user:Users {userId: row.userId})
MATCH (movie:Movies {movieId: row.movieId})
MERGE (user)-[:WATCHED {rating: row.rating}]->(movie);

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_users_genres.csv" AS row
FIELDTERMINATOR '|'
MATCH (user:Users {userId: row.userId})
MATCH (genres:Genres {genres: row.genre})
MERGE (user)-[:POPULAR]->(genres);

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_movies_genres.csv" AS row
FIELDTERMINATOR '|'
MATCH (movie:Movies {movieId: row.movieId})
MATCH (genres:Genres {genres: row.genres})
MERGE (movie)-[:GENRE]->(genres);

USING PERIODIC COMMIT
LOAD CSV WITH HEADERS FROM "file:///ml_movies_similarity.csv" AS row
FIELDTERMINATOR '|'
MATCH (movie1:Movies {movieId: row.movieId})
MATCH (movie2:Movies {movieId: row.sim_moveId})
MERGE (movie1)-[:SIMILAR {relevance: row.relevance}]->(movie2);

###################################################
###################################################
### QUERY FOR MOVIE RECOMMENDATION

MATCH (u1:Users)-[:WATCHED]->(m3:Movies)
WHERE u1.userId =~'4'
WITH [i in m3.movieId | i] as movies
MATCH path = (u:Users)-[:WATCHED]->(m1:Movies)-[s:SIMILAR]->(m2:Movies),
(m2)-[:GENRE]->(g:Genres),
(u)-[:POPULAR]->(g)
WHERE u.userId =~'4' and not m2.movieId in movies
RETURN distinct u.userId as userId, g.genres as genres, 
m2.title as title, m2.rating_mean as rating
ORDER BY m2.rating_mean descending
LIMIT 5


userId	genres	title	rating
"4"	"Action"	"French Connection, The (1971)"	"3.9614397386535996"
"4"	"Action"	"Die Hard (1988)"	"3.9338465081088194"
"4"	"Action"	"Terminator, The (1984)"	"3.8963923539441803"
"4"	"Action"	"Edge of Tomorrow (2014)"	"3.8436374549819927"
"4"	"Action"	"Dirty Harry (1971)"	"3.781862745098039"











